@using DoggyLife.Data.Database
@using DoggyLife.Models.Storage.Settings
@using DoggyLife.Services
@using Microsoft.EntityFrameworkCore
@inject MusicService MusicService
@inject SqliteWasmHelper.ISqliteWasmDbContextFactory<AppDbContext> Factory
@inject IJSRuntime JSRuntime

<div class="music-settings-manager">
    <h3>Music Settings</h3>
    <div class="setting-row">
        <span>Music:</span>
        <PixelButton OnClick="ToggleMute">
            @(MusicService.IsMuted ? "Unmute" : "Mute")
        </PixelButton>
    </div>
</div>

@code {
    [Parameter]
    public MusicSettings? Settings { get; set; }

    [Parameter]
    public EventCallback<MusicSettings> OnSettingsUpdated { get; set; }

    protected override void OnParametersSet()
    {
        // If no settings exist yet, create a default one
        Settings ??= new MusicSettings();
    }

    protected override async Task OnInitializedAsync()
    {
        await MusicService.InitializeAsync();
    }

    private async Task ToggleMute()
    {
        await MusicService.ToggleMuteAsync();
        // Force component to re-render to update button text
        StateHasChanged();
    }
}
