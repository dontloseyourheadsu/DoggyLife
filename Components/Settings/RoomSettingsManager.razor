@using DoggyLife.Components
@using DoggyLife.Data.Database
@using DoggyLife.Models
@using DoggyLife.Models.Storage.Settings
@using DoggyLife.Services
@using Microsoft.EntityFrameworkCore
@inject RoomService RoomService
@inject SqliteWasmHelper.ISqliteWasmDbContextFactory<AppDbContext> Factory
@inject IJSRuntime JSRuntime

<div class="room-settings-manager">
    <h3>Room Appearance</h3>

    <div class="room-settings-section">
        <h4>Floor Colors</h4>
        <div class="color-setting-row">
            <span>Light Floor:</span>
            <input type="color" @bind-value="@FloorLightColorHex" @bind-value:event="oninput"
                @onchange="UpdatePreview" />
        </div>
        <div class="color-setting-row">
            <span>Dark Floor:</span>
            <input type="color" @bind-value="@FloorDarkColorHex" @bind-value:event="oninput"
                @onchange="UpdatePreview" />
        </div>
    </div>

    <div class="room-settings-section">
        <h4>Wall Colors</h4>
        <div class="color-setting-row">
            <span>Light Wall:</span>
            <input type="color" @bind-value="@WallLightColorHex" @bind-value:event="oninput"
                @onchange="UpdatePreview" />
        </div>
        <div class="color-setting-row">
            <span>Dark Wall:</span>
            <input type="color" @bind-value="@WallDarkColorHex" @bind-value:event="oninput" @onchange="UpdatePreview" />
        </div>
        <div class="color-setting-row">
            <span>Wall Outline:</span>
            <input type="color" @bind-value="@WallOutlineColorHex" @bind-value:event="oninput"
                @onchange="UpdatePreview" />
        </div>
        <div class="color-setting-row">
            <span>Wall Stripe:</span>
            <input type="color" @bind-value="@WallStripeColorHex" @bind-value:event="oninput"
                @onchange="UpdatePreview" />
        </div>
    </div>

    <RoomColorVisualizer Settings="@_previewSettings" @ref="_visualizer" />

    <div class="settings-actions">
        <PixelButton OnClick="ResetToDefaults">
            Reset to Default
        </PixelButton>
        <PixelButton OnClick="SaveSettings">
            Apply Changes
        </PixelButton>
    </div>
</div>

@code {
    [Parameter]
    public RoomSettings? Settings { get; set; }

    [Parameter]
    public EventCallback<RoomSettings> OnSettingsUpdated { get; set; }

    private RoomSettings _previewSettings = new();
    private RoomColorVisualizer? _visualizer;

    // Hex color representation for input controls
    private string FloorLightColorHex
    {
        get => ToHex(_previewSettings.FloorLightRed, _previewSettings.FloorLightGreen, _previewSettings.FloorLightBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.FloorLightRed = r;
            _previewSettings.FloorLightGreen = g;
            _previewSettings.FloorLightBlue = b;
        }
    }

    private string FloorDarkColorHex
    {
        get => ToHex(_previewSettings.FloorDarkRed, _previewSettings.FloorDarkGreen, _previewSettings.FloorDarkBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.FloorDarkRed = r;
            _previewSettings.FloorDarkGreen = g;
            _previewSettings.FloorDarkBlue = b;
        }
    }

    private string WallLightColorHex
    {
        get => ToHex(_previewSettings.WallLightRed, _previewSettings.WallLightGreen, _previewSettings.WallLightBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.WallLightRed = r;
            _previewSettings.WallLightGreen = g;
            _previewSettings.WallLightBlue = b;
        }
    }

    private string WallDarkColorHex
    {
        get => ToHex(_previewSettings.WallDarkRed, _previewSettings.WallDarkGreen, _previewSettings.WallDarkBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.WallDarkRed = r;
            _previewSettings.WallDarkGreen = g;
            _previewSettings.WallDarkBlue = b;
        }
    }

    private string WallOutlineColorHex
    {
        get => ToHex(_previewSettings.WallOutlineRed, _previewSettings.WallOutlineGreen, _previewSettings.WallOutlineBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.WallOutlineRed = r;
            _previewSettings.WallOutlineGreen = g;
            _previewSettings.WallOutlineBlue = b;
        }
    }

    private string WallStripeColorHex
    {
        get => ToHex(_previewSettings.WallStripeRed, _previewSettings.WallStripeGreen, _previewSettings.WallStripeBlue);
        set
        {
            byte r, g, b;
            FromHex(value, out r, out g, out b);
            _previewSettings.WallStripeRed = r;
            _previewSettings.WallStripeGreen = g;
            _previewSettings.WallStripeBlue = b;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RoomService.InitializeAsync();

        if (Settings == null)
        {
            Settings = await RoomService.GetSettingsAsync();
        }

        // Clone the settings for preview
        CopySettings(Settings, _previewSettings);
    }

    private void CopySettings(RoomSettings source, RoomSettings target)
    {
        // Floor colors
        target.FloorLightRed = source.FloorLightRed;
        target.FloorLightGreen = source.FloorLightGreen;
        target.FloorLightBlue = source.FloorLightBlue;

        target.FloorDarkRed = source.FloorDarkRed;
        target.FloorDarkGreen = source.FloorDarkGreen;
        target.FloorDarkBlue = source.FloorDarkBlue;

        // Wall colors
        target.WallLightRed = source.WallLightRed;
        target.WallLightGreen = source.WallLightGreen;
        target.WallLightBlue = source.WallLightBlue;

        target.WallDarkRed = source.WallDarkRed;
        target.WallDarkGreen = source.WallDarkGreen;
        target.WallDarkBlue = source.WallDarkBlue;

        target.WallOutlineRed = source.WallOutlineRed;
        target.WallOutlineGreen = source.WallOutlineGreen;
        target.WallOutlineBlue = source.WallOutlineBlue;

        target.WallStripeRed = source.WallStripeRed;
        target.WallStripeGreen = source.WallStripeGreen;
        target.WallStripeBlue = source.WallStripeBlue;

        // Copy ID if it exists
        target.Id = source.Id;
    }

    private void UpdatePreview()
    {
        _visualizer?.RefreshCanvas();
    }

    private async Task SaveSettings()
    {
        // Clone the preview settings back to the actual settings
        if (Settings != null)
        {
            CopySettings(_previewSettings, Settings);

            // Save to database
            await RoomService.UpdateSettingsAsync(Settings);

            // Notify parent component
            await OnSettingsUpdated.InvokeAsync(Settings);
        }
    }

    private void ResetToDefaults()
    {
        // Reset to default colors from RoomService

        // Floor light color
        var floorLightColor = RoomService.DefaultFloorLightColor;
        _previewSettings.FloorLightRed = floorLightColor.Red;
        _previewSettings.FloorLightGreen = floorLightColor.Green;
        _previewSettings.FloorLightBlue = floorLightColor.Blue;

        // Floor dark color
        var floorDarkColor = RoomService.DefaultFloorDarkColor;
        _previewSettings.FloorDarkRed = floorDarkColor.Red;
        _previewSettings.FloorDarkGreen = floorDarkColor.Green;
        _previewSettings.FloorDarkBlue = floorDarkColor.Blue;

        // Wall light color
        var wallLightColor = RoomService.DefaultWallLightColor;
        _previewSettings.WallLightRed = wallLightColor.Red;
        _previewSettings.WallLightGreen = wallLightColor.Green;
        _previewSettings.WallLightBlue = wallLightColor.Blue;

        // Wall dark color
        var wallDarkColor = RoomService.DefaultWallDarkColor;
        _previewSettings.WallDarkRed = wallDarkColor.Red;
        _previewSettings.WallDarkGreen = wallDarkColor.Green;
        _previewSettings.WallDarkBlue = wallDarkColor.Blue;

        // Wall outline color
        var wallOutlineColor = RoomService.DefaultWallOutlineColor;
        _previewSettings.WallOutlineRed = wallOutlineColor.Red;
        _previewSettings.WallOutlineGreen = wallOutlineColor.Green;
        _previewSettings.WallOutlineBlue = wallOutlineColor.Blue;

        // Wall stripe color
        var wallStripeColor = RoomService.DefaultWallStripeColor;
        _previewSettings.WallStripeRed = wallStripeColor.Red;
        _previewSettings.WallStripeGreen = wallStripeColor.Green;
        _previewSettings.WallStripeBlue = wallStripeColor.Blue;

        UpdatePreview();
    }

    // Helper for color conversion between hex and RGB
    private string ToHex(byte r, byte g, byte b)
    {
        return $"#{r:X2}{g:X2}{b:X2}";
    }

    private void FromHex(string hex, out byte r, out byte g, out byte b)
    {
        hex = hex.TrimStart('#');
        r = Convert.ToByte(hex.Substring(0, 2), 16);
        g = Convert.ToByte(hex.Substring(2, 2), 16);
        b = Convert.ToByte(hex.Substring(4, 2), 16);
    }
}