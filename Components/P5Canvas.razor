@using DoggyLife.Models.Storage.Settings
@using DoggyLife.Services
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject RoomService RoomService
@implements IAsyncDisposable

<div id="@CanvasContainerId" class="p5-canvas-container" ></div>

@code {
    private const string CanvasContainerId = "p5-canvas-container";
    private DotNetObjectReference<P5Canvas>? _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);

            // Register this component with JavaScript
            await JSRuntime.InvokeVoidAsync("initializeP5DotNetReference", _objectReference);

            // Initialize p5 canvas
            await JSRuntime.InvokeVoidAsync("initializeP5Canvas", CanvasContainerId);

            // Request room data from C#
            await JSRuntime.InvokeVoidAsync("requestRoomData");
        }
    }

    [JSInvokable]
    public Task<object> GetRoomDataForP5()
    {
        var colors = RoomService.GetRoomColors();

        // Get floor colors
        var floorColors = RoomService.GetFloorColors();
        var wallColors = RoomService.GetWallColors();

        // Convert to format expected by JavaScript (RGB string)
        var result = new
        {
            floorLightColor = $"{floorColors[0].Red},{floorColors[0].Green},{floorColors[0].Blue}",
            floorDarkColor = $"{floorColors[1].Red},{floorColors[1].Green},{floorColors[1].Blue}",
            wallLightColor = $"{wallColors[0].Red},{wallColors[0].Green},{wallColors[0].Blue}",
            wallDarkColor = $"{wallColors[2].Red},{wallColors[2].Green},{wallColors[2].Blue}"
        };

        return Task.FromResult<object>(result);
    }

    // Update the p5.js canvas when settings change
    public async Task UpdateCanvasAsync()
    {
        await JSRuntime.InvokeVoidAsync("requestRoomData");
    }

    public ValueTask DisposeAsync()
    {
        _objectReference?.Dispose();
        return ValueTask.CompletedTask;
    }
}
