@using DoggyLife.Models.Storage.Room
@using DoggyLife.Services
@using Microsoft.JSInterop
@inject PlacedItemService PlacedItemService
@inject IJSRuntime JSRuntime

<div class="placed-items-display">
    <h4>Placed Items (@_placedItems.Count)</h4>

    @if (_placedItems.Any())
    {
        <div class="placed-items-list">
            @foreach (var item in _placedItems)
            {
                <div class="placed-item">
                    <strong>@item.ItemName</strong> (@item.ItemType)
                    <br />
                    Position: (@item.PositionX.ToString("F1"), @item.PositionY.ToString("F1"), @item.PositionZ.ToString("F1"))
                    <br />
                    Rotation: @item.Rotation.ToString("F2") rad
                    <br />
                    Type: @item.PlacementType
                    @if (!string.IsNullOrEmpty(item.Wall))
                    {
                        <text> - Wall: @item.Wall</text>
                    }
                    <br />
                    <small>Placed: @item.PlacedAt.ToString("HH:mm:ss")</small>
                    <button @onclick="() => DeleteItem(item.Id)" class="delete-btn">âœ—</button>
                </div>
            }
        </div>

        <button @onclick="ClearAllItems" class="clear-all-btn">Clear All Items</button>
    }
    else
    {
        <p class="no-items">No items placed yet</p>
    }
</div>

@code {
    private List<PlacedItem> _placedItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPlacedItems();
    }

    private async Task LoadPlacedItems()
    {
        try
        {
            _placedItems = await PlacedItemService.GetAllPlacedItemsAsync();
            Console.WriteLine($"PlacedItemsDisplay: Loaded {_placedItems.Count} items from database");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PlacedItemsDisplay: Error loading placed items: {ex.Message}");
            _placedItems = new List<PlacedItem>(); // Initialize empty list on error
            StateHasChanged();
        }
    }

    private async Task DeleteItem(int itemId)
    {
        await PlacedItemService.DeletePlacedItemAsync(itemId);
        await JSRuntime.InvokeVoidAsync("removePlacedItemFromRoom", itemId);
        await LoadPlacedItems();
    }

    private async Task ClearAllItems()
    {
        await PlacedItemService.ClearAllPlacedItemsAsync();
        await JSRuntime.InvokeVoidAsync("clearAllPlacedItemsFromRoom");
        await LoadPlacedItems();
    }

    /// <summary>
    /// Public method to refresh the list (can be called from parent components)
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadPlacedItems();
    }
}
