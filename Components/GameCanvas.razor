@using DoggyLife.Components
@using DoggyLife.Data.Database
@using DoggyLife.Helpers
@using DoggyLife.Models.Objects
@using DoggyLife.Models.Storage
@using DoggyLife.Physics
@using DoggyLife.Rendering
@using DoggyLife.Models
@using DoggyLife.Services
@using DoggyLife.Settings
@using System.Numerics
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject RoomService RoomService

<div @onkeydown="OnKeyPress" tabindex="0" @ref="ContainerRef">
    <P5Canvas Width="@($"{_room.Width}px")" Height="@($"{_room.Height}px")" @ref="p5Canvas" OnP5Ready="OnP5Ready" />

    <div style="margin-top: 20px; text-align: center;">
        <p>Dog Animation Controls</p>
        <div style="margin-top: 10px;">
            <strong>Dog 0 Controls:</strong><br />
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.FrontSitting)">Sitting
                Front</button>
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.LeftSitting)">Sitting Left</button>
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.RightSitting)">Sitting
                Right</button>
        </div>
        <div style="margin-top: 5px;">
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.FrontWalking)">Walking
                Front</button>
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.LeftWalking)">Walking Left</button>
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.RightWalking)">Walking
                Right</button>
            <button @onclick="async () => await SetDogState(_dog, DogAnimationState.BackWalking)">Walking Back</button>
        </div>

        <div style="margin-top: 15px;">
            <strong>Move Dog:</strong><br />
            <div>
                <button @onclick="async () => await MoveDog(0, -50)">Up</button>
            </div>
            <div>
                <button @onclick="async () => await MoveDog(-50, 0)">Left</button>
                <button @onclick="async () => await MoveDog(0, 0)">Center</button>
                <button @onclick="async () => await MoveDog(50, 0)">Right</button>
            </div>
            <div>
                <button @onclick="async () => await MoveDog(0, 50)">Down</button>
            </div>
        </div>

        <!-- Keep the existing controls -->
    </div>
</div>

@code {
    private Room _room = new Room
    {
        Width = 800,
        Height = 600
    };

    private P5Canvas? p5Canvas;
    private Dog _dog = new Dog();
    private Dog _dog1 = new Dog();

    [Parameter]
    public GameMode CurrentGameMode { get; set; } = GameMode.Interaction;

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyboardEvent { get; set; }

    private ElementReference ContainerRef;

    private async Task OnP5Ready(object _)
    {
        // P5.js canvas is ready and initialized
        await RefreshCanvas();
    }

    private async Task RefreshCanvas()
    {
        if (p5Canvas != null)
        {
            await p5Canvas.UpdateCanvasAsync();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        await OnKeyboardEvent.InvokeAsync(e);

        // Handle key presses for game interaction
        // ...
        await RefreshCanvas();
    }

    private async Task SetDogState(Dog dog, DogAnimationState state)
    {
        if (dog.Animation != null)
        {
            dog.Animation.SetState(state);
        }

        // Also update the p5.js dog
        if (p5Canvas != null)
        {
            await p5Canvas.SetDogStateAsync((int)state);
        }
    }

    private async Task MoveDog(float x, float y)
    {
        // Update the C# dog position
        _dog.X = x;
        _dog.Y = y;

        // Update the p5.js dog position
        if (p5Canvas != null)
        {
            await p5Canvas.MoveDogAsync(x, y);
        }
    }
}
