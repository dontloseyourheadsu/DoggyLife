@using DoggyLife.Models.Canvas
@using DoggyLife.Models.Room
@using DoggyLife.Models.Storage.Settings
@using DoggyLife.Services
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject RoomService RoomService

<div id="@CanvasContainerId" class="p5-canvas-container" ></div>

@code {
    private const string CanvasContainerId = "room-canvas-container"; 
    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./js/interop/global/canvas/canvas-interop.js");

            var roomData = GetRoomData();
            var canvasData = new CanvasCreateData
            {
                CanvasType = "room",
                CanvasContainerId = CanvasContainerId,
                AdditionalData = roomData
            };
            await _module.InvokeVoidAsync("initializeP5Canvas", canvasData);
        }
    }

    private RoomData GetRoomData()
    {
        var colors = RoomService.GetRoomColors();

        // Get floor colors
        var floorColors = RoomService.GetFloorColors();
        var wallColors = RoomService.GetWallColors();

        // Convert to format expected by JavaScript (RGB string)
        var result = new RoomData
        {
            FloorLightColor = $"{floorColors[0].Red},{floorColors[0].Green},{floorColors[0].Blue}",
            FloorDarkColor = $"{floorColors[1].Red},{floorColors[1].Green},{floorColors[1].Blue}",
            WallLightColor = $"{wallColors[0].Red},{wallColors[0].Green},{wallColors[0].Blue}",
            WallDarkColor = $"{wallColors[2].Red},{wallColors[2].Green},{wallColors[2].Blue}"
        };

        return result;
    }
}