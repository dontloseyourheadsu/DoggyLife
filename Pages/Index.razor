@page "/"
@using DoggyLife.Components
@using DoggyLife.Data.Database
@using DoggyLife.Models.Storage
@using DoggyLife.Physics
@using DoggyLife.Rendering
@using DoggyLife.Rendering.Isometric
@using DoggyLife.Models
@using DoggyLife.Settings
@using Microsoft.EntityFrameworkCore
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using System.Numerics
@using SqliteWasmHelper
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ISqliteWasmDbContextFactory<AppDbContext> Factory

<div style="width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center;"
    @onkeydown="OnKeyPress" tabindex="0" @ref="_containerRef">
    @if (!_isPlaying)
    {
        <PixelButton OnClick="(async () => await PlayGame())">
            Play
        </PixelButton>
    }
    else
    {
        <div style="display: flex; flex-direction: column; align-items: center;">
            <PixelButton OnClick="ToggleGameMode">
                Mode: @_currentGameMode
            </PixelButton>
            <input type="text" @bind="_newUserName" placeholder="Enter your name" style="margin-top: 10px; width: 200px;"/>
            <PixelButton OnClick="UpdateUserName">
                Update Name
            </PixelButton>

            <SKCanvasView Width="@_width" Height="@_height" EnableRenderLoop="true" IgnorePixelScaling="true"
                OnPaintSurface="OnGamePaint" />

            <div style="margin-top: 20px; text-align: center;">
                <p>Dog Animation Controls</p>
                <div style="margin-top: 10px;">
                    <button @onclick="() => SetDogState(DogAnimationState.FrontStanding)">Sitting Front</button>
                    <button @onclick="() => SetDogState(DogAnimationState.LeftStanding)">Sitting Left</button>
                    <button @onclick="() => SetDogState(DogAnimationState.RightStanding)">Sitting Right</button>
                </div>
                <div style="margin-top: 5px;">
                    <button @onclick="() => SetDogState(DogAnimationState.FrontWalking)">Walking Front</button>
                    <button @onclick="() => SetDogState(DogAnimationState.LeftWalking)">Walking Left</button>
                    <button @onclick="() => SetDogState(DogAnimationState.RightWalking)">Walking Right</button>
                    <button @onclick="() => SetDogState(DogAnimationState.BackWalking)">Walking Back</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private MusicTrack _musicTrack = MusicTrack.None;
    private Scene _environment = Scene.Garden;
    private VerletSystem _verletSystem;
    private bool _isPlaying = false;
    private int _width = 300;
    private int _height = 300;
    private float _deltaTime = 0.016f;
    private ElementReference _containerRef;
    private DotNetObjectReference<Index> _objRef;
    private User? _user;
    private string _newUserName = "Guesto";

    private GameMode _currentGameMode = GameMode.Interaction;

    private float _hologramX = 0;
    private float _hologramY = 0;
    private float _hologramMoveSpeed = 0.1f;

    private WallCursor _wallCursor = new(WallSide.Left, 0, 0);

    private DogAnimation _dogAnimation = new DogAnimation();
    private float _dogX = 150;
    private float _dogY = 150;
    private float _dogScale = 0.5f;
    private float _dogSize = 25; // Size of the dog sprite in pixels

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadUserDetails();
        await LoadAssets();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);

            // Setup JS resize handler
            await JSRuntime.InvokeVoidAsync("setupResizeHandler", _objRef);

            // Initialize canvas dimensions
            await ResizeCanvas();
        }
    }

    private async Task LoadUserDetails()
    {
        using var ctx = await Factory.CreateDbContextAsync();

        var users = await ctx.Users.ToListAsync();
        _user = users.FirstOrDefault();

        if (_user is not null)
        {
            _newUserName = _user.Name;
            Console.WriteLine($"Loaded user: {_user.Name}");
        }
    }

    [JSInvokable]
    public async Task OnBrowserResize(int width, int height)
    {
        // This method will be called from JavaScript when the browser is resized
        // with window dimensions already calculated in JS
        await SetCanvasSize(width, height);
        StateHasChanged();
    }

    private async Task ResizeCanvas()
    {
        // Call our JS function to get the window dimensions
        await JSRuntime.InvokeVoidAsync("getWindowSize", _objRef);
    }

    [JSInvokable]
    public async Task SetCanvasSize(int windowWidth, int windowHeight)
    {
        // Calculate maximum canvas size (accounting for margins, padding, UI elements)
        var maxCanvasSize = (Math.Min(windowWidth, windowHeight) / 2) - 100;
        maxCanvasSize = Math.Max(maxCanvasSize, 20);

        // Set canvas to be square with the determined size
        _width = maxCanvasSize;
        _height = maxCanvasSize;

        // Set grid size to be 1/20 of the canvas size
        CalculateOptimalGridSize(maxCanvasSize, maxCanvasSize);

        // Reset dog position to the center of the canvas
        _dogX = _width / 2;
        _dogY = _height / 2;

        // Update dog scale based on canvas size
        UpdateDogScale();

        // If the VerletSystem is already initialized, update it
        if (_verletSystem != null)
        {
            _verletSystem.UpdateScreenSize(_width, _height);
        }
    }

    private void UpdateDogScale()
    {
        // Assume the dog should fit within one grid cell
        float gridCellSize = IsometricConfig.GridSize;

        // If the dog sprite's original size is stored in _dogSize
        // We need to scale it to match the grid cell size
        _dogScale = gridCellSize / _dogSize;

        Console.WriteLine($"Updated dog scale to: {_dogScale} (Grid size: {gridCellSize}, Dog size: {_dogSize})");
    }

    private void CalculateOptimalGridSize(int canvasWidth, int canvasHeight)
    {
        // We need to account for both the floor area (GridWidth x GridLength)
        // and the walls heights for proper rendering

        // Calculate the floor's diagonal
        float floorDiagonal = (float)Math.Sqrt(
        Math.Pow(IsometricConfig.GridWidth, 2) +
        Math.Pow(IsometricConfig.GridLength, 2));

        // The isometric projection will need more height for the walls
        float isoX = IsometricConfig.IsoX;
        float isoY = IsometricConfig.IsoY;
        float wallHeightFactor = IsometricConfig.WallHeight * isoY;

        // The horizontal span of the isometric grid is determined by the grid width and length
        // The vertical span includes the floor's height range plus the wall height
        float horizontalSpan = (IsometricConfig.GridWidth + IsometricConfig.GridLength) * isoX;
        float verticalSpan = floorDiagonal * isoY + wallHeightFactor;

        // Calculate the grid size that would make the room fit in the canvas with some margin
        float horizontalGridSize = canvasWidth * 0.8f / horizontalSpan;
        float verticalGridSize = canvasHeight * 0.8f / verticalSpan;

        // Choose the smaller value to ensure the entire room fits
        IsometricConfig.GridSize = (int)Math.Floor(Math.Min(horizontalGridSize, verticalGridSize));
    }

    private async Task LoadAssets()
    {
        try
        {
            await _dogAnimation.LoadSpritesheetAsync(Http, "images/dogs/dog1.png");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assets: {ex.Message}");
        }
    }

    private void SetDogState(DogAnimationState state)
    {
        _dogAnimation.SetState(state);
    }

    private async Task PlayGame()
    {
        if (_isPlaying) return;

        SetupVerletSystem();
        await PlayMatchaGreen();
        _isPlaying = true;

        _hologramX = IsometricConfig.GridWidth / 2;
        _hologramY = IsometricConfig.GridLength / 2;
    }

    private void SetupVerletSystem()
    {
        _verletSystem = new VerletSystem(_width, _height);
    }

    private async Task PlayMatchaGreen()
    {
        if (_musicTrack != MusicTrack.None) return;

        await JSRuntime.InvokeVoidAsync("changeTrack", "Matcha Green Tea");
        _musicTrack = MusicTrack.MatchaGreenTea;
        StateHasChanged();
    }

    private void ToggleGameMode()
    {
        _currentGameMode = _currentGameMode switch
        {
            GameMode.Interaction => GameMode.FloorEditor,
            GameMode.FloorEditor => GameMode.WallEditor,
            GameMode.WallEditor => GameMode.Viewer,
            GameMode.Viewer => GameMode.Interaction,
            _ => GameMode.Interaction
        };

        if (_currentGameMode == GameMode.WallEditor)
            _wallCursor = new(WallSide.Left, 0, 0);

        StateHasChanged();
    }

    public void OnKeyPress(KeyboardEventArgs e)
    {
        var key = e.Key.ToLower();

        if (_currentGameMode == GameMode.FloorEditor)
        {
            switch (key)
            {
                case "arrowup":
                case "w":
                    if (_hologramY > 0)
                        _hologramY -= _hologramMoveSpeed;
                    break;
                case "arrowdown":
                case "s":
                    if (_hologramY < IsometricConfig.GridLength - 1)
                        _hologramY += _hologramMoveSpeed;
                    break;
                case "arrowleft":
                case "a":
                    if (_hologramX > 0)
                        _hologramX -= _hologramMoveSpeed;
                    break;
                case "arrowright":
                case "d":
                    if (_hologramX < IsometricConfig.GridWidth - 1)
                        _hologramX += _hologramMoveSpeed;
                    break;
            }
        }
        else if (_currentGameMode == GameMode.WallEditor)
        {
            switch (key)
            {
                case "arrowleft":
                case "a":
                    // For left wall, we need to invert the direction to match visual expectations
                    // So 'a' moves cursor to the left side of the left wall
                    _wallCursor.MoveHorizontal(_wallCursor.Side == WallSide.Left ? -1 : -1, _hologramMoveSpeed);
                    break;
                case "arrowright":
                case "d":
                    _wallCursor.MoveHorizontal(_wallCursor.Side == WallSide.Left ? 1 : 1, _hologramMoveSpeed);
                    break;
                case "arrowup":
                case "w":
                    _wallCursor.MoveVertical(1, _hologramMoveSpeed); // Move up (increase height)
                    break;
                case "arrowdown":
                case "s":
                    _wallCursor.MoveVertical(-1, _hologramMoveSpeed); // Move down (decrease height)
                    break;
                case "t": // Alternative key to toggle wall side
                    _wallCursor.ToggleWallSide();
                    break;
            }
        }
        else if (_currentGameMode == GameMode.Interaction)
        {
            // Handle dog movement and animation based on key presses
            float moveDist = IsometricConfig.GridSize / 5;

            // Set a minimum movement distance to avoid too small movements
            if (moveDist < 1) moveDist = 1;

            switch (key)
            {
                case "arrowup":
                case "w":
                    _dogY -= moveDist;
                    _dogAnimation.SetState(DogAnimationState.BackWalking);
                    break;
                case "arrowdown":
                case "s":
                    _dogY += moveDist;
                    _dogAnimation.SetState(DogAnimationState.FrontWalking);
                    break;
                case "arrowleft":
                case "a":
                    _dogX -= moveDist;
                    _dogAnimation.SetState(DogAnimationState.LeftWalking);
                    break;
                case "arrowright":
                case "d":
                    _dogX += moveDist;
                    _dogAnimation.SetState(DogAnimationState.RightWalking);
                    break;
                // Keys for sitting positions
                case "q":
                    _dogAnimation.SetState(DogAnimationState.LeftStanding);
                    break;
                case "e":
                    _dogAnimation.SetState(DogAnimationState.RightStanding);
                    break;
                case "x":
                    _dogAnimation.SetState(DogAnimationState.FrontStanding);
                    break;
            }
        }

        StateHasChanged();
    }

    private void OnGamePaint(SKPaintSurfaceEventArgs e)
    {
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.Black);

        IsometricRoomBuilder.DrawIsometricRoom(canvas, _width, _height);

        if (_currentGameMode == GameMode.FloorEditor)
            DrawFloorHologram(canvas);

        if (_currentGameMode == GameMode.WallEditor)
            DrawWallHologram(canvas);

        // Calculate the isometric position for the dog
        float isoX = IsometricConfig.IsoX;
        float isoY = IsometricConfig.IsoY;
        float offsetX = IsometricConfig.GetOffsetX(_width);
        float offsetY = IsometricConfig.GetOffsetY(_height);

        // Convert screen coordinates to isometric grid coordinates
        // This positions the dog on the isometric grid properly
        float gridX = _dogX / _width * IsometricConfig.GridWidth;
        float gridY = _dogY / _height * IsometricConfig.GridLength;

        // Convert grid coordinates to screen coordinates using isometric projection
        float dogScreenX = (gridX - gridY) * IsometricConfig.GridSize * isoX + offsetX;
        float dogScreenY = (gridX + gridY) * IsometricConfig.GridSize * isoY + offsetY;

        // Update and draw dog animations at the isometric position
        _dogAnimation.Update(_deltaTime);
        _dogAnimation.Draw(canvas, dogScreenX, dogScreenY, _dogScale);

        _verletSystem.Update(_deltaTime);
        _verletSystem.Draw(canvas);

        canvas.DrawRect(new SKRect(0, 0, _width, _height), new SKPaint
        {
            Color = SKColors.White,
            Style = SKPaintStyle.Stroke,
            StrokeWidth = 2
        });

        // Add text to show current dog animation state
        var textPaint = new SKPaint
        {
            Color = SKColors.White,
            IsAntialias = true
        };

        canvas.DrawText($"Player name: {_user?.Name ?? "Guest"}", 10, 20, textPaint);
    }

    private void DrawFloorHologram(SKCanvas canvas)
    {
        float isoX = IsometricConfig.IsoX;
        float isoY = IsometricConfig.IsoY;
        float offsetX = IsometricConfig.GetOffsetX(_width);
        float offsetY = IsometricConfig.GetOffsetY(_height);
        var x = _hologramX;
        var y = _hologramY;

        float x1 = (x - y) * IsometricConfig.GridSize * isoX + offsetX;
        float y1 = (x + y) * IsometricConfig.GridSize * isoY + offsetY;
        float x2 = ((x + 1) - y) * IsometricConfig.GridSize * isoX + offsetX;
        float y2 = ((x + 1) + y) * IsometricConfig.GridSize * isoY + offsetY;
        float x3 = ((x + 1) - (y + 1)) * IsometricConfig.GridSize * isoX + offsetX;
        float y3 = ((x + 1) + (y + 1)) * IsometricConfig.GridSize * isoY + offsetY;
        float x4 = (x - (y + 1)) * IsometricConfig.GridSize * isoX + offsetX;
        float y4 = (x + (y + 1)) * IsometricConfig.GridSize * isoY + offsetY;

        var path = new SKPath();
        path.MoveTo(x1, y1);
        path.LineTo(x2, y2);
        path.LineTo(x3, y3);
        path.LineTo(x4, y4);
        path.Close();

        var fill = new SKPaint
        {
            IsAntialias = true,
            Color = new SKColor(0, 255, 0, 128),
            Style = SKPaintStyle.Fill
        };
        var stroke = new SKPaint
        {
            IsAntialias = true,
            Color = new SKColor(0, 255, 0, 255),
            Style = SKPaintStyle.Stroke,
            StrokeWidth = 2
        };

        canvas.DrawPath(path, fill);
        canvas.DrawPath(path, stroke);
    }

    private void DrawWallHologram(SKCanvas canvas)
    {
        float isoX = IsometricConfig.IsoX;
        float isoY = IsometricConfig.IsoY;
        float offsetX = IsometricConfig.GetOffsetX(_width);
        float offsetY = IsometricConfig.GetOffsetY(_height);

        float x1, y1, x2, y2;

        // Calculate base points for wall segment based on side
        if (_wallCursor.Side == WallSide.Left)
        {
            // Left wall logic - matches DrawLeftWall in IsometricWallBuilder
            float y = _wallCursor.Position;
            // Bottom-left corner of the floor tile
            x1 = (0 - y) * IsometricConfig.GridSize * isoX + offsetX;
            y1 = (0 + y) * IsometricConfig.GridSize * isoY + offsetY;
            // Bottom-right corner of the floor tile
            x2 = (0 - (y + 1)) * IsometricConfig.GridSize * isoX + offsetX;
            y2 = (0 + (y + 1)) * IsometricConfig.GridSize * isoY + offsetY;
        }
        else // Right wall
        {
            // Right wall logic - matches DrawRightWall in IsometricWallBuilder
            float x = _wallCursor.Position;
            // Bottom-left corner of the floor tile
            x1 = (x - 0) * IsometricConfig.GridSize * isoX + offsetX;
            y1 = (x + 0) * IsometricConfig.GridSize * isoY + offsetY;
            // Bottom-right corner of the floor tile
            x2 = ((x + 1) - 0) * IsometricConfig.GridSize * isoX + offsetX;
            y2 = ((x + 1) + 0) * IsometricConfig.GridSize * isoY + offsetY;
        }

        // Calculate the height offset in pixels (consistent with IsometricWallBuilder)
        float baseWallHeight = _wallCursor.Height * IsometricConfig.GridSize * isoY;
        float hologramHeight = IsometricConfig.GridSize * isoY * 0.3f;

        // Draw visual guides to show where the wall will connect to the floor
        var guidePaint = new SKPaint
        {
            IsAntialias = true,
            Color = new SKColor(255, 255, 0, 150),
            Style = SKPaintStyle.Stroke,
            StrokeWidth = 1,
            PathEffect = SKPathEffect.CreateDash(new float[] { 4, 4 }, 0)
        };

        // Draw guides from floor to wall base
        canvas.DrawLine(x1, y1, x1, y1 - baseWallHeight, guidePaint);
        canvas.DrawLine(x2, y2, x2, y2 - baseWallHeight, guidePaint);

        // Calculate points for the wall hologram
        var path = new SKPath();

        // Bottom edge at current height
        path.MoveTo(x1, y1 - baseWallHeight);
        path.LineTo(x2, y2 - baseWallHeight);

        // Top edge at hologram height above current height
        float x3 = x2;
        float y3 = y2 - baseWallHeight - hologramHeight;
        float x4 = x1;
        float y4 = y1 - baseWallHeight - hologramHeight;

        path.LineTo(x3, y3);
        path.LineTo(x4, y4);
        path.Close();

        // Draw the hologram
        var fill = new SKPaint
        {
            IsAntialias = true,
            Color = new SKColor(0, 255, 0, 128),
            Style = SKPaintStyle.Fill
        };
        var stroke = new SKPaint
        {
            IsAntialias = true,
            Color = new SKColor(0, 255, 0, 255),
            Style = SKPaintStyle.Stroke,
            StrokeWidth = 2
        };

        canvas.DrawPath(path, fill);
        canvas.DrawPath(path, stroke);

        // Draw connection points
        var pointPaint = new SKPaint
        {
            IsAntialias = true,
            Color = SKColors.Yellow,
            Style = SKPaintStyle.Fill
        };

        // Draw indicators at the connection points
        canvas.DrawCircle(x1, y1 - baseWallHeight, 3, pointPaint);
        canvas.DrawCircle(x2, y2 - baseWallHeight, 3, pointPaint);

        // Add grid indicator to show exact wall position
        var gridPaint = new SKPaint
        {
            IsAntialias = true,
            Color = SKColors.Red,
            Style = SKPaintStyle.Fill
        };

        // If right wall, draw position indicator on the floor
        if (_wallCursor.Side == WallSide.Right)
        {
            float x = _wallCursor.Position;
            float floorX = (x - 0) * IsometricConfig.GridSize * isoX + offsetX;
            float floorY = (x + 0) * IsometricConfig.GridSize * isoY + offsetY;
            canvas.DrawCircle(floorX, floorY, 4, gridPaint);
        }
        else // Left wall
        {
            float y = _wallCursor.Position;
            float floorX = (0 - y) * IsometricConfig.GridSize * isoX + offsetX;
            float floorY = (0 + y) * IsometricConfig.GridSize * isoY + offsetY;
            canvas.DrawCircle(floorX, floorY, 4, gridPaint);
        }
    }

    public void Dispose()
    {
        // Clean up the DotNetObjectReference
        _objRef?.Dispose();
    }

    private async Task UpdateUserName()
    {
        await using var db = await Factory.CreateDbContextAsync();

        if (_user is null)
        {
            _user = new User { Name = _newUserName };
            db.Users.Add(_user);
        }
        else
        {
            _user.Name = _newUserName;
            db.Users.Update(_user);
        }

        await db.SaveChangesAsync(); // make sure the INSERT/UPDATE is executed

        var users = await db.Users.ToListAsync(); // NOW the count is correct
        Console.WriteLine($"Updated user name to: {_user.Name}. Total users in DB: {users.Count}");

        StateHasChanged();
    }
}