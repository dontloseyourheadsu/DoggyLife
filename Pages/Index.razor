@page "/"
@using DoggyLife.Components
@using DoggyLife.Data.Database
@using DoggyLife.Models.Storage
@using DoggyLife.Models
@using DoggyLife.Pages.Screens
@using DoggyLife.Services
@using Microsoft.EntityFrameworkCore
@using System.Numerics
@using SqliteWasmHelper
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject MusicService _musicService

<div style="width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center;">
    @if (_environment == GameEnvironment.None)
    {
        <PixelButton OnClick="PlayGame">
            Play
        </PixelButton>
    }
    else if (_environment == GameEnvironment.Home)
    {
        <div style="display: flex; flex-direction: column; align-items: center;">
            <GameModeSelector 
                CurrentGameMode="@_currentGameMode" 
                OnGameModeChanged=HandleGameModeChanged />
            <PixelButton OnClick="() => _environment = GameEnvironment.Settings">
                Settings
            </PixelButton>

            <GameCanvas 
                CurrentGameMode="@_currentGameMode"
                OnKeyboardEvent="@HandleKeyboardEvent" />
        </div>
    }
    else if (_environment == GameEnvironment.Settings)
    {
        <div style="display: flex; flex-direction: column; align-items: center;">
            <GameSettings />

            <PixelButton OnClick="() => _environment = GameEnvironment.Home">
                Back to Home
            </PixelButton>
        </div>
    }
</div>

@code {
    private GameEnvironment _environment = GameEnvironment.None;
    private GameMode _currentGameMode = GameMode.Interaction;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    private async Task PlayGame()
    {
        if (_environment != GameEnvironment.None) return;
        
        await _musicService.InitializeAsync();

        await _musicService.PlayTrack(MusicTrack.MatchaGreenTea);
        _environment = GameEnvironment.Home;
        StateHasChanged();
    }

    private void HandleGameModeChanged(GameMode newMode)
    {
        _currentGameMode = newMode;
        StateHasChanged();
    }

    private void HandleKeyboardEvent(KeyboardEventArgs e)
    {
        // You can handle global keyboard events here if needed
    }
}
